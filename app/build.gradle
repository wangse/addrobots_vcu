apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'

android {
	compileSdkVersion 23
	buildToolsVersion '23.0.3'

	defaultConfig {
		applicationId "com.addrobots.vehiclecontrol"
		minSdkVersion 21
		targetSdkVersion 23
		versionCode 1
		versionName "1.0"
		multiDexEnabled true

		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
	}
	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}
	testOptions {
		unitTests.returnDefaultValues = true
	}
}

dependencies {
	// Unit testing
	testCompile 'junit:junit:4.12'
	testCompile 'org.mockito:mockito-core:1.10.19'
	testCompile 'org.robolectric:robolectric:2.4'
	androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
	androidTestCompile 'com.android.support.test:runner:0.5'
	androidTestCompile 'com.android.support.test:rules:0.5'
	// These two are transitive rules to force the right libraries for testing to match the app.
	androidTestCompile 'com.android.support:support-annotations:23.3.0'
	androidTestCompile 'com.google.code.findbugs:jsr305:3.0.0'

	// Firebase
	compile 'com.google.firebase:firebase-messaging:9.0.2'
	compile 'com.google.firebase:firebase-auth:9.0.2'
	compile 'com.google.android.gms:play-services:9.0.2'
	compile 'com.google.gms:google-services:3.0.0'

	// Protobuf
	compile 'com.android.support:appcompat-v7:23.3.0'
	compile 'com.google.protobuf.nano:protobuf-javanano:3.0.0-alpha-3'
	compile 'com.google.protobuf:protobuf-java:2.6.1'
	protobuf files('libs/protos.jar')

	// Libs
	compile fileTree(dir: 'libs', include: ['*.jar'])

	// GRPC
	compile 'io.grpc:grpc-core:0.7.0'
	compile 'io.grpc:grpc-okhttp:0.7.0'
	compile 'io.grpc:grpc-stub:0.7.0'
	compile 'io.grpc:grpc-protobuf-nano:0.7.0'
}

protobuf {
	// Configure the protoc executable
	protoc {
		// Download from repositories
		artifact = 'com.google.protobuf:protoc:3.0.0-alpha-3'
	}
	plugins {
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java:0.7.0'
		}
	}
	generateProtoTasks {
		all()*.builtins {
			javanano {
				// Options added to --javanano_out
				option 'java_multiple_files=false'
				option 'ignore_services=true'
			}
		}
		ofNonTest()*.plugins {
			grpc {
				// Options added to --grpc_out
				option 'nano=true'
			}
		}
	}
}

//apply plugin: 'com.google.gms.google-services'